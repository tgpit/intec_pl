{"version":3,"file":"script.js","sources":["src/massiveedit.js","src/index.js"],"sourcesContent":["// @flow\r\n\r\nexport class MassiveEdit {\r\n\r\n\tstatic defaults = {\r\n\t\tpropertyId: null,\r\n\t\tiblockId: null,\r\n\t\tlanguage: null,\r\n\t\tprefixSelected: null,\r\n\t};\r\n\r\n\tconstructor(tableId: string, options: Object = {}) {\r\n\t\tthis.tableId = tableId;\r\n\t\tthis.options = Object.assign({}, this.constructor.defaults, options);\r\n\t}\r\n\r\n\thandleActionDone(dir: boolean) : void {\r\n\t\tBX[dir ? 'addCustomEvent' : 'removeCustomEvent']('avitoExportMassiveEditDone', this.onActionDone);\r\n\t}\r\n\r\n\thandleModalClose(dir: boolean) : void {\r\n\t\tBX[dir ? 'addCustomEvent' : 'removeCustomEvent'](this.modal(), 'onWindowClose', this.onWindowClose);\r\n\t}\r\n\r\n\tonActionDone = () => {\r\n\t\tBX.closeWait(); // opened inside submit, but not closed\r\n\t\tthis.modal().Close();\r\n\t\tthis.grid().reload();\r\n\r\n\t\tthis.releaseModal();\r\n\r\n\t\tthis.handleActionDone(false);\r\n\t\tthis.handleModalClose(false);\r\n\t}\r\n\r\n\tonWindowClose = () => {\r\n\t\tthis.releaseModal();\r\n\r\n\t\tthis.handleActionDone(false);\r\n\t\tthis.handleModalClose(false);\r\n\t}\r\n\r\n\topen() {\r\n\t\tconst modal = this.modal();\r\n\r\n\t\tmodal.Show();\r\n\r\n\t\tthis.handleModalClose(true);\r\n\t\tthis.handleActionDone(true);\r\n\t}\r\n\r\n\tmodal() : BX.CAdminDialog {\r\n\t\tif (this._modal == null) {\r\n\t\t\tthis._modal = this.createModal();\r\n\t\t}\r\n\r\n\t\treturn this._modal;\r\n\t}\r\n\r\n\treleaseModal() : void {\r\n\t\tthis._modal = null;\r\n\t}\r\n\r\n\tcreateModal() : BX.CAdminDialog {\r\n\t\treturn new BX.CAdminDialog({\r\n\t\t\tcontent_url: this.url(),\r\n\t\t\tcontent_post: {\r\n\t\t\t\tselected: this.selectedRows(),\r\n\t\t\t\tproperty: this.options.propertyId,\r\n\t\t\t\tiblockId: this.options.iblockId,\r\n\t\t\t},\r\n\t\t\twidth: 800,\r\n\t\t\theight: 500,\r\n\t\t\tresizable: true,\r\n\t\t\tbuttons: [\r\n\t\t\t\tBX.CAdminDialog.btnSave,\r\n\t\t\t\tBX.CAdminDialog.btnCancel,\r\n\t\t\t],\r\n\t\t});\r\n\t}\r\n\r\n\tisForAllChecked() : boolean {\r\n\t\treturn this.grid()?.getActionsPanel()?.getForAllCheckbox()?.checked;\r\n\t}\r\n\r\n\tselectedRows() : Array {\r\n\t\tconst selected = this.grid().getRows().getSelectedIds();\r\n\t\tconst prefix = this.options.prefixSelected;\r\n\r\n\t\tif (this.isForAllChecked()) {\r\n\t\t\tthrow new Error(BX.message('AVITO_EXPORT_UI_ADMIN_MASSIVE_EDIT_FOR_ALL_NOT_SUPPORTED'));\r\n\t\t}\r\n\r\n\t\tif (prefix == null) { return selected; }\r\n\r\n\t\tfor (let key in selected) {\r\n\t\t\tif (!selected.hasOwnProperty(key)) { continue; }\r\n\r\n\t\t\tselected[key] = prefix + selected[key];\r\n\t\t}\r\n\r\n\t\treturn selected;\r\n\t}\r\n\r\n\turl() : string {\r\n\t\treturn `/bitrix/tools/avito.export/massiveedit/modal.php?bxpublic=Y&lang=${this.options.language}`;\r\n\t}\r\n\r\n\tgrid() : BX.Main.grid {\r\n\t\treturn BX.Main.gridManager.getById(this.tableId).instance;\r\n\t}\r\n}","import {MassiveEdit} from \"./massiveedit\";\r\n\r\nfunction massiveEditOpen(tableId, options = {}) {\r\n\ttry {\r\n\t\tconst controller = new MassiveEdit(tableId, options);\r\n\t\tcontroller.open();\r\n\t} catch (e) {\r\n\t\tshowError(tableId, e.message);\r\n\t}\r\n}\r\n\r\nfunction showError(tableId: string, message: string) {\r\n\tconst uiGrid = BX.Main.gridManager.getById(tableId).instance;\r\n\r\n\tuiGrid.arParams.MESSAGES = [\r\n\t\t{ TYPE: 'ERROR', TEXT: message }\r\n\t];\r\n\r\n\tBX.onCustomEvent(window, 'BX.Main.grid:paramsUpdated', []);\r\n}\r\n\r\nexport {\r\n\tMassiveEdit,\r\n\tmassiveEditOpen\r\n};"],"names":["MassiveEdit","constructor","tableId","options","onActionDone","BX","closeWait","modal","Close","grid","reload","releaseModal","handleActionDone","handleModalClose","onWindowClose","Object","assign","this","defaults","dir","open","Show","_modal","createModal","CAdminDialog","content_url","url","content_post","selected","selectedRows","property","propertyId","iblockId","width","height","resizable","buttons","btnSave","btnCancel","isForAllChecked","_this$grid","getActionsPanel","_this$grid$getActions","getForAllCheckbox","_this$grid$getActions2","checked","getRows","getSelectedIds","prefix","prefixSelected","Error","message","key","hasOwnProperty","language","Main","gridManager","getById","instance","e","arParams","MESSAGES","TYPE","TEXT","onCustomEvent","window","showError"],"mappings":"2IAEO,MAAMA,EASZC,YAAYC,EAAiBC,EAAkB,SAa/CC,aAAe,KACdC,GAAGC,iBACEC,QAAQC,aACRC,OAAOC,cAEPC,oBAEAC,kBAAiB,QACjBC,kBAAiB,SAGvBC,cAAgB,UACVH,oBAEAC,kBAAiB,QACjBC,kBAAiB,SA3BjBX,QAAUA,OACVC,QAAUY,OAAOC,OAAO,GAAIC,KAAKhB,YAAYiB,SAAUf,GAG7DS,iBAAiBO,GAChBd,GAAGc,EAAM,iBAAmB,qBAAqB,6BAA8BF,KAAKb,cAGrFS,iBAAiBM,GAChBd,GAAGc,EAAM,iBAAmB,qBAAqBF,KAAKV,QAAS,gBAAiBU,KAAKH,eAqBtFM,OACeH,KAAKV,QAEbc,YAEDR,kBAAiB,QACjBD,kBAAiB,GAGvBL,eACoB,MAAfU,KAAKK,cACHA,OAASL,KAAKM,eAGbN,KAAKK,OAGbX,oBACMW,OAAS,KAGfC,qBACQ,IAAIlB,GAAGmB,aAAa,CAC1BC,YAAaR,KAAKS,MAClBC,aAAc,CACbC,SAAUX,KAAKY,eACfC,SAAUb,KAAKd,QAAQ4B,WACvBC,SAAUf,KAAKd,QAAQ6B,UAExBC,MAAO,IACPC,OAAQ,IACRC,WAAW,EACXC,QAAS,CACR/B,GAAGmB,aAAaa,QAChBhC,GAAGmB,aAAac,aAKnBC,4CACQtB,KAAKR,kBAAL+B,EAAaC,6BAAbC,EAAgCC,4BAAhCC,EAAqDC,QAG7DhB,qBACOD,EAAWX,KAAKR,OAAOqC,UAAUC,iBACjCC,EAAS/B,KAAKd,QAAQ8C,kBAExBhC,KAAKsB,wBACF,IAAIW,MAAM7C,GAAG8C,QAAQ,gEAGd,MAAVH,SAAyBpB,MAExB,IAAIwB,KAAOxB,EACVA,EAASyB,eAAeD,KAE7BxB,EAASwB,GAAOJ,EAASpB,EAASwB,WAG5BxB,EAGRF,YACS,oEAAmET,KAAKd,QAAQmD,WAGzF7C,cACQJ,GAAGkD,KAAKC,YAAYC,QAAQxC,KAAKf,SAASwD,UA3GtC1D,EAELkB,SAAW,CACjBa,WAAY,KACZC,SAAU,KACVsB,SAAU,KACVL,eAAgB,iDCNO/C,EAASC,EAAU,QAEvB,IAAIH,EAAYE,EAASC,GACjCiB,OACV,MAAOuC,IAKV,SAAmBzD,EAAiBiD,GACpB9C,GAAGkD,KAAKC,YAAYC,QAAQvD,GAASwD,SAE7CE,SAASC,SAAW,CAC1B,CAAEC,KAAM,QAASC,KAAMZ,IAGxB9C,GAAG2D,cAAcC,OAAQ,6BAA8B,IAXtDC,CAAUhE,EAASyD,EAAER"}